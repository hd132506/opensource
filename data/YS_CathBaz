성당과 시장


1
리눅스는 전까지의 관습을 뒤엎은 혁신적인 개발방식에 의해 탄생한 OS이다. 성당을 건축하듯 소수의 사람들이 폐쇄적으로 개발하는 기성의 방식과는 달리, 개방적인 환경에서 각기 다른 목표와 접근으로 개발하는 리눅스 커뮤니티는 마치 시장을 닮았다. 놀라운 것은 이 시장 형태의 개발 방식이 생각보다 효과적이라는 것이다. 1996년 중반 나는 내 프로젝트에 이 ‘시장 스타일’을 도입해보았고, 크게 성공했다.
이 글은 그 프로젝트에 관한 이야기이다. 독자들은 이 글을 통해 무엇이 리눅스 커뮤니티를 좋은 소프트웨어의 원천으로 만들어 주는지 이해할 수 있을 것이고, 어쩌면 이 글이 독자들을 더 생산적으로 만들어 줄 수도 있다.

2
“모든 양질의 소프트웨어는 개발자의 가려운 곳을 긁는 것으로부터 시작된다.”
많은 개발자들이 자신의 시간을 필요하지도 않고 좋아하지도 않은 프로그램을 개발하는 데에 할애한다. 그러나 리눅스의 세계에서는 다르다. 이것이 리눅스 커뮤니티에서 나온 소프트웨어들이 평균적으로 질이 좋은 이유이다. 

“좋은 프로그래머는 무엇을 작성해야 하는지 알고 있다. 위대한 프로그래머는 무엇을 재작성(재사용)해야 하는지 알고 있다.”
유닉스 세계에는  소스를 공유하는 관습이 있는데, 이것은 코드를 재사용하기 좋다. 리눅스도 ‘MINIX’ 라는 작은 운영체제를 기반으로 탄생했다.

“버릴 계획을 세워라, 어차피 버리게 될 것이다.” 
가끔 첫 번째 해결책을 구현할 때까지도 문제점을 제대로 인지하지 못할 때까 있다. 올바르게 문제를 해결하고 싶다면, 적어도 한 번은 처음부터 시작할 준비를 해야 한다. 
코드 공유를 장려하는 문화에서는 이런 방식으로 프로젝트가 발전한다.

“프로그램에 흥미를 잃었다면, 그것을 유능한 후임자에게 넘겨주어라.”

3
사용자가 있다는 것은 매우 좋은 일이다. 유닉스의 또 다른 장점은 많은 사용자들이 동시에 해커이기도 하다는 것이다. 리눅스는 이 강점을 극단적으로 활용했다. 소스코드가 공개되어 있기 때문에, 조금만 격려해주면 사용자들은 문제점을 분석하고 해결책을 제시하며, 디버깅 시간을 줄이는 데에 큰 도움을 준다.

“사용자들을 공동개발자로 다루면 코드가 매우 효율적으로 개선되며 효율적으로 디버깅할 수 있다.”
필자는 리누스의 영리한 점은 리눅스 커널을 만들었다는 것보다 리눅스 개발 모델을 만들었다는 점이라고 생각한다. ‘난 기본적으로 매우 게으른 사람이라서 실제로는 다른 사람들이 해놓은 일을 가지고 공로라고 인정받곤 해요’ 리누스가 여러번 되풀이하던 말이다.
돌이켜보면, 리눅스의 성공과 방법의 선례는 GNU Emacs Lisp library와 Lisp 코드 아카이브의 개발에서 찾아볼 수 있다. 성당 스타일로 만들어진 Emacs C 코어나 다른 대부분의 GNU 도구들과 대조적으로 Lisp 코드 풀의 발전은 유동적이었고 사용자들이 주도했다.

4
“일찍, 자주 발표하라. 그리고 사용자들의 소리에 귀를 기울여라”
대부분의 개발자들은 작은 프로젝트가 아니라면 이런 정책은 나쁜 것이라고 생각했다. 사용자들은 버그가 많은 초기 버전을 원하지 않기 때문이다. 이런 믿음이 성당스타일의 개발을 더 선호하게 만들었다. 사용자들이 가능한 적은 버그를 발견하는 것이 목표라면 6개월에 한번씩 발표하면서 그동안 열심히 일하는 것이 나을 것이고, Emacs C 코어가 이런 방식으로 만들어졌다.
리누스의 열린 개발정책은 이러한 성당 개발 방식과 완전히 반대된다. 리눅스가 널리 알려지면서, 다중배포방식이 퍼지기 시작했다. 리누스는 가장 효과적인 방식으로 사용자들을 공동 개발자라고 여겼다. 그는 그의 유저이자 해커들에게 지속적인 자극과 보답을 제공해 주었다. 리눅스 개발에 참여함으로써 자기 만족을 얻으리라는 기대에 자극받고, 자신의 프로젝트가 계속해서 발전하고 있다는 것에 보상을 얻는다.

“보는 눈이 충분히 많으면 모든 버그가 얕아진다.”
필자는 이를 ‘리누스의 법칙’이라고 부른다. 누군가가 문제를 발견한다. 그리고 또다른 누군가가 그 문제를 이해한다. 중요한 점은 사람이 충분히 많을 경우 이 두가지가 빨리 일어난다는 것이다. 이것이 성당 건축 스타일과 시장 스타일의 핵심적인 차이점이다. 

5
필자는 자신의 이론을 시험하기 위해 당시 진행하고 있는 프로젝트에 다음과 같은 방법을 사용했다.
- 일찍, 자주 발표했다.
- 프로젝트에 대한 일로 나에게 연락해 오는 사람은 누구든지 베타테스터 목록에 올렸다.
- 새로 발표할 때마다 베타테스터들에게 떠들썩하게 발표를 알리며 참여를 격려했다.
- 그들의 이야기를 들었다. 설계 결정에 투표를 하기도 했고 패치나 피드백을 보내 올 때마다 베타 테스터들을 구슬렸다.
이 단순한 방법들은 즉각 효력을 나타냈다. 사려깊은 비판과 팬 메일, 건의, 버그 리포트들과 때로는 잘 수정된 코드를 받기도 했다.
“베타테스터들을 가장 중요한 자원으로 여겨 준다면 그들은 정말 가장 중요한 자원이 되어 준다.”

6
“좋은 아이디어를 생각해내는 것 다음으로 중요한 일은 사용자들이 알려준 좋은 아이디어를 깨닫는 편이다. 때로는 이 편이 더 나을 수도 있다.”

7. 8. 생략

9
프로젝트를 시작할 때부터 시장 스타일로 개발할 수는 없다. 리누스도, 필자도 처음부터 시장 스타일로 시작하지는 않았다. 초기의 개발자 커뮤니티는 가지고 놀면서 테스트할 수 있는 것이 필요하다. 개발자 커뮤니티를 만들 때 제시해야 할 것은 ‘그럴 듯한 장래성’이다. 당신의 프로그램은 특별히 잘 작동하지 않아도 된다. 미숙하거나, 버그 투성이거나, 문서가 형편없어도 상관없다. 하지만 실패하지 말아야 할 것은 잠재적인 공동 개발자들에게 그 프로그램이 머지않아 정말 괜찮은 프로그램으로 발전할 것이라는 것을 설득시키는 것이다. 필자는 진행자가 뛰어난 재능으로 설계할 수 있어야 한다고는 생각하지 않는다. 그러나 다른 사람의 좋은 설계를 알아볼 수 있는 진행자의 안목은 절대적으로 중요하다. 
시장 스타일의 프로젝트에서 똑똑한 설계만큼이나, 혹은 그보다 더 중요한 것은 진행자가 의사소통을 잘해야 한다는 것이다.
이것은 명백하다. 개발자 커뮤니티를 만드려면 사람들을 모아야 하고, 당신이 하고 있는 일에 대해 그들의 흥미를 끌어야 하며, 그들이 그 일을 즐길 수 있게끔 만들어주어야 한다. 시장 모델이 성공하려면 사람들을 이끄는 매력이 있어야 한다.

10
리누스는 대부분의 개발이 다른 사람들에 의해 이루어지는 프로젝트의 수문장으로 자신을 위치시키는 데에 성공했고, 프로젝트가 스스로 유지될 수 있게 될 때까지 계속해서 흥미거리를 공급해주었다. 
많은 사람들이 개인주의자들의 문화가 파편화되어 있으며 배타적이고 소모적이면서 비밀이 많을 거라고 생각한다. 하지만 이런 생각은 리눅스 문서의 놀라운 다양성과 질, 깊이에 의해 산산히 부서지고 만다.
“개발 진행자가 강제력을 사용하지 않고 사람들을 이끌어 낼 지 알고 있다면 한 명 보다는 여러 명의 리더가 필연적으로 더 낫다.”

클로즈드 소스로 개발하는 사람은 리눅스 커뮤니티가 문제를 해결하기 위해 끌어낼 수 있는 재능의 풀과 경쟁할 수 없다. 클로즈드 소프트웨어는 오픈소스 소프트웨어와의 군비경쟁에서 이길 수 없기 때문에, 결국 오픈소스 문화가 승리를 거둘 것이다.
